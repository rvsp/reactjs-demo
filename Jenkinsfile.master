
pipeline {
    agent any

    // Define environment variables for Docker Hub repositories and credentials
    environment {
        DOCKER_HUB_USERNAME = 'suganyamadhan1996'
        DOCKER_HUB_DEV_REPO = 'dev' // Replace with your Docker Hub dev repository name
        DOCKER_HUB_PROD_REPO = 'prod' // Replace with your Docker Hub prod repository nam
    }

    stages {
        stage('Checkout') {
            steps {
                // Checkout the code from GitHub
                checkout([$class: 'GitSCM', branches: [[name: 'dev'], [name: 'master']], userRemoteConfigs: [[url: 'https://github.com/suganyaanbalagan123/reactjs-demo.git']]])
            }
        }

        stage('Build and Push Docker Image') {
            when {
                // Execute this stage only if changes are pushed to the dev branch
                expression {
                    return env.BRANCH_NAME == 'dev'
                }
            }
            steps {
                // Build and push the Docker image to the dev repository
                script {
                    dir('/var/lib/jenkins/workspace/reactjs_demo/') {
                        docker.withRegistry("https://index.docker.io/v1/", "777") {
                            def customImage = docker.build("${DOCKER_HUB_USERNAME}/${DOCKER_HUB_DEV_REPO}:${env.BUILD_NUMBER}", ".")
                            customImage.push()
                        }
                    }
                }
            }
        }

        stage('Build and Push Prod Docker Image') {
            when {
                // Execute this stage only if changes are pushed to the master branch
                expression {
                    return env.BRANCH_NAME == 'master'
                }
            }
            steps {
                // Build and push the Docker image to the prod repository
                script {
                    dir('/var/lib/jenkins/workspace/reactjs_demo_prod/') {
                        docker.withRegistry("https://index.docker.io/v1/", "777") {
                            def customImage = docker.build("${DOCKER_HUB_USERNAME}/${DOCKER_HUB_PROD_REPO}:${env.BUILD_NUMBER}", ".")
                            customImage.push()
                        }
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
